
import { toast } from "@/hooks/use-toast";

export const generatePDF = async ({ title, subtitle, content, fileName }) => {
  console.log('Generating PDF with content:', { title, subtitle, content });
  
  try {
    // Create an HTML string with nicely formatted content
    let htmlContent = `
<!DOCTYPE html>
<html>
<head>
  <title>${title}</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      line-height: 1.6;
      margin: 40px;
      color: #333;
    }
    h1 {
      color: #006400;
      text-align: center;
      margin-bottom: 30px;
      font-size: 24px;
    }
    h2 {
      color: #008000;
      margin-top: 20px;
      margin-bottom: 10px;
      font-size: 18px;
      border-bottom: 1px solid #ddd;
      padding-bottom: 5px;
    }
    .section {
      margin-bottom: 20px;
      page-break-inside: avoid;
    }
    .chapter {
      page-break-before: always;
    }
    .first-chapter {
      page-break-before: avoid;
    }
    .insight {
      padding: 12px;
      margin: 10px 0;
      background-color: #f9f9f9;
      border-left: 3px solid #00FF7F;
    }
    .insight-title {
      font-weight: bold;
      margin-bottom: 8px;
      color: #006400;
    }
    .insight-content {
      line-height: 1.5;
    }
    .footer {
      margin-top: 40px;
      text-align: center;
      font-size: 12px;
      color: #666;
    }
    p {
      text-align: justify;
      margin-bottom: 10px;
    }
    .compatibility-score {
      font-size: 18px;
      font-weight: bold;
      color: #006400;
      text-align: center;
      margin: 20px 0;
    }
  </style>
</head>
<body>
  <h1>${title}</h1>`;

  if (subtitle) {
    htmlContent += `<h2 style="text-align: center; color: #444; border-bottom: none;">${subtitle}</h2>`;
  }

  // Format content as sections
  if (content) {
    // Split content by lines for processing
    const lines = content.split('\n');
    let currentSection = '';
    let sectionContent = [];
    
    for (const line of lines) {
      if (line.match(/^#+\s/) || line.match(/^[0-9]+\.\s/) || 
          line.startsWith('Overall Compatibility') || 
          line.startsWith('Guna Milan') || 
          line.startsWith('Hand Shape') || 
          line.startsWith('Heart Line') ||
          line.startsWith('Head Line') || 
          line.startsWith('Fate Line') || 
          line.startsWith('Venus Mount') || 
          line.startsWith('Marriage Line') ||
          line.startsWith('Relationship Strengths') || 
          line.startsWith('Relationship Challenges') ||
          line.startsWith('Personalized Advice')) {
        
        // Save previous section
        if (currentSection !== '' && sectionContent.length > 0) {
          htmlContent += `
  <div class="section">
    <h2>${currentSection}</h2>
    <div class="insight">
      ${sectionContent.join('<br/>')}
    </div>
  </div>`;
        }
        
        // Start new section
        currentSection = line.replace(/^#+\s/, '').replace(/^[0-9]+\.\s/, '');
        sectionContent = [];
      } else if (line.trim() !== '') {
        sectionContent.push(`<p>${line}</p>`);
      }
    }
    
    // Add the last section
    if (currentSection !== '' && sectionContent.length > 0) {
      htmlContent += `
  <div class="section">
    <h2>${currentSection}</h2>
    <div class="insight">
      ${sectionContent.join('<br/>')}
    </div>
  </div>`;
    }
  }

  htmlContent += `
  <div class="footer">
    This report was generated by PalmReading.ai based on palm analysis and Vedic astrology principles.
    Copyright Â© ${new Date().getFullYear()} PalmReading.ai
  </div>
</body>
</html>`;
    
    // Use the printJS functionality to print HTML as PDF
    return printHTMLAsPDF(htmlContent, fileName);
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw error;
  }
};

// Function to print HTML as PDF using browser's print functionality
export const printHTMLAsPDF = (htmlContent, filename) => {
  try {
    console.log('Creating and printing HTML as PDF...');
    
    // Create an iframe to host the content
    const iframe = document.createElement('iframe');
    iframe.style.position = 'fixed';
    iframe.style.right = '0';
    iframe.style.bottom = '0';
    iframe.style.width = '0';
    iframe.style.height = '0';
    iframe.style.border = '0';
    document.body.appendChild(iframe);
    
    const iframeDocument = iframe.contentDocument || iframe.contentWindow?.document;
    
    if (!iframeDocument) {
      throw new Error('Could not create iframe document');
    }
    
    // Write content to iframe
    iframeDocument.open();
    iframeDocument.write(htmlContent);
    iframeDocument.close();
    
    // Add CSS for print
    const style = iframeDocument.createElement('style');
    style.textContent = `
      @media print {
        @page {
          size: A4;
          margin: 0.5cm;
        }
        body {
          -webkit-print-color-adjust: exact !important;
          print-color-adjust: exact !important;
        }
      }
    `;
    iframeDocument.head.appendChild(style);
    
    // Change filename
    const originalDocTitle = document.title;
    document.title = filename;
    
    // Wait for resources to load
    setTimeout(() => {
      try {
        // Use the iframe's window to print
        iframe.contentWindow?.focus();
        iframe.contentWindow?.print();
        
        // Cleanup
        setTimeout(() => {
          document.body.removeChild(iframe);
          document.title = originalDocTitle;
          
          toast({
            title: "Success",
            description: `Your ${filename} is ready for download.`,
          });
          
          console.log('PDF generation complete');
        }, 1000);
      } catch (printError) {
        console.error('Error during printing:', printError);
        document.body.removeChild(iframe);
        document.title = originalDocTitle;
        throw printError;
      }
    }, 1000);
    
    return true;
  } catch (error) {
    console.error('Error creating PDF:', error);
    throw error;
  }
};

// Simplified backup method in case the main method fails
export const downloadTextAsPDF = async (text, filename) => {
  try {
    console.log('Attempting to download text as PDF using alternative method...');
    
    const blob = new Blob([text], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    
    setTimeout(() => {
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }, 100);

    toast({
      title: "Success",
      description: `Your ${filename} is ready for download.`,
    });
    
    return true;
  } catch (error) {
    console.error('Error using alternative download method:', error);
    toast({
      title: "Error",
      description: "Failed to generate the PDF report. Please try again.",
      variant: "destructive",
    });
    throw error;
  }
};
