import { useEffect, useState, useCallback } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { Hand, Download, Share2, Loader2, AlertCircle } from 'lucide-react';
import Header from '@/components/Header';
import Footer from '@/components/Footer';
import { revealAnimation } from '@/lib/animations';
import { generatePDF } from '@/lib/pdfUtils';
import { toast } from '@/hooks/use-toast';
import { useGemini } from '@/contexts/GeminiContext';

const PalmReadingResult = () => {
  const navigate = useNavigate();
  const [palmAnalysis, setPalmAnalysis] = useState<string | null>(null);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [hasAttemptedAnalysis, setHasAttemptedAnalysis] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const { gemini, isLoading: isGeminiLoading } = useGemini();
  
  const analyzePalm = useCallback(async () => {
    console.log('Starting palm analysis...');
    const storedImage = sessionStorage.getItem('palmImage');
    
    if (!storedImage) {
      console.error('No palm image found in session storage');
      setError('No palm image found. Please upload an image first.');
      return false;
    }
    
    if (!gemini) {
      console.error('Gemini not initialized');
      setError('Gemini AI not initialized. Please check your API key.');
      return false;
    }
    
    setIsAnalyzing(true);
    
    try {
      console.log('Sending image to Gemini API for analysis...');
      
      // Make sure the image data is in the correct format for the API
      const result = await gemini.analyzePalm(storedImage);
      console.log('Analysis result received:', result ? 'Success' : 'Empty result');
      
      if (!result || typeof result !== 'string' || result.trim() === '') {
        throw new Error('Empty or invalid result from Gemini API');
      }
      
      console.log('Analysis complete, setting result');
      setPalmAnalysis(result);
      sessionStorage.setItem('palmReadingResult', result);
      
      // Ensure we clear any previous errors
      setError(null);
      return true;
    } catch (error) {
      console.error('Error analyzing palm:', error);
      setError(`Error analyzing palm: ${error instanceof Error ? error.message : 'Unknown error'}`);
      toast({
        title: "Analysis Error",
        description: "There was an error analyzing your palm image. Please try again with a clearer image.",
        variant: "destructive",
      });
      return false;
    } finally {
      setIsAnalyzing(false);
      setHasAttemptedAnalysis(true);
    }
  }, [gemini]);
  
  useEffect(() => {
    const cleanup = revealAnimation();
    
    const loadData = async () => {
      try {
        // Clear any previous errors when loading data
        setError(null);
        
        // Get stored palm reading from sessionStorage
        const storedReading = sessionStorage.getItem('palmReadingResult');
        const storedImage = sessionStorage.getItem('palmImage');
        
        console.log('Checking stored reading:', storedReading ? 'Found' : 'Not found');
        console.log('Checking stored image:', storedImage ? 'Found' : 'Not found');
        
        // IMPORTANT: We've removed the condition that accepts short placeholder readings
        // Only accept a real reading that's been generated by the AI
        if (storedReading && storedReading.length > 100 && storedReading.includes('##')) {
          // Only use stored reading if it looks like a real analysis (contains markdown headers)
          console.log('Found valid stored reading, using it');
          setPalmAnalysis(storedReading);
          setHasAttemptedAnalysis(true);
        } else if (storedImage && gemini && !isGeminiLoading) {
          console.log('No valid stored reading but we have image and gemini, analyzing now...');
          // Clear any previously stored reading if it exists but is not valid
          if (storedReading) {
            console.log('Clearing invalid stored reading');
            sessionStorage.removeItem('palmReadingResult');
          }
          await analyzePalm();
        } else if (!storedImage) {
          // If no image, redirect to upload page
          console.log('No palm image found, redirecting to upload page');
          toast({
            title: "No Palm Image",
            description: "Please upload a palm image for analysis first.",
          });
          navigate('/palm-reading');
        }
      } catch (err) {
        console.error('Error in loadData:', err);
        setError(`Failed to load palm reading: ${err instanceof Error ? err.message : 'Unknown error'}`);
      }
    };
    
    if (!isGeminiLoading) {
      loadData();
    }
    
    return () => {
      cleanup();
    };
  }, [navigate, gemini, isGeminiLoading, analyzePalm]);

  const formatAnalysisContent = (content: string) => {
    // Convert markdown-style sections into formatted HTML
    const sections = content.split(/\n#{2,3} /);
    
    if (sections.length <= 1) {
      // If no markdown headers are detected, just split by paragraphs
      return content.split('\n').map((para, idx) => (
        <p key={idx} className="mb-4">{para.trim() ? para : <br />}</p>
      ));
    }
    
    // Extract the first section (intro text)
    const intro = sections[0];
    const formattedSections = sections.slice(1).map((section, index) => {
      const sectionTitle = section.split('\n')[0];
      const sectionContent = section.slice(sectionTitle.length).trim();
      
      return (
        <div key={index} className="mb-8">
          <h3 className="text-xl font-semibold mb-4">{sectionTitle}</h3>
          {sectionContent.split('\n\n').map((para, paraIdx) => (
            <p key={paraIdx} className="mb-4">{para.trim()}</p>
          ))}
        </div>
      );
    });
    
    return (
      <>
        {intro.split('\n\n').map((para, idx) => (
          <p key={`intro-${idx}`} className="mb-4">{para.trim() ? para : <br />}</p>
        ))}
        {formattedSections}
      </>
    );
  };

  const handleFullReportDownload = async () => {
    toast({
      title: "Generating Full Report",
      description: "Your comprehensive report is being prepared for download...",
    });
    
    try {
      await generatePDF({
        title: "Complete Palm Reading Analysis",
        subtitle: "Comprehensive Personal Insights",
        content: palmAnalysis || "No analysis available",
        fileName: "Palm_Reading_Full_Report.pdf"
      });
      
      toast({
        title: "Success",
        description: "Your comprehensive report has been downloaded successfully.",
      });
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to generate the report. Please try again.",
        variant: "destructive",
      });
    }
  };
  
  const handleBasicReportDownload = async () => {
    toast({
      title: "Generating Basic Report",
      description: "Your basic report is being prepared for download...",
    });
    
    const basicContent = palmAnalysis 
      ? palmAnalysis.split('\n').slice(0, 20).join('\n') + '\n\n(This is a basic version of your report. For full insights, please download the complete report.)'
      : "No analysis available";
    
    try {
      await generatePDF({
        title: "Basic Palm Reading Analysis",
        subtitle: "Essential Personal Insights",
        content: basicContent,
        fileName: "Palm_Reading_Basic_Report.pdf"
      });
      
      toast({
        title: "Success",
        description: "Your basic report has been downloaded successfully.",
      });
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to generate the report. Please try again.",
        variant: "destructive",
      });
    }
  };
  
  const retryAnalysis = async () => {
    // Clear previous results and errors
    setPalmAnalysis(null);
    setError(null);
    sessionStorage.removeItem('palmReadingResult');
    
    // Try analysis again
    await analyzePalm();
  };
  
  const isLoading = isGeminiLoading || isAnalyzing;
  
  if (isLoading) {
    return (
      <div className="min-h-screen">
        <Header />
        <main className="pt-32 pb-24">
          <div className="content-container">
            <div className="max-w-4xl mx-auto text-center">
              <div className="flex flex-col items-center justify-center space-y-4">
                <Loader2 className="h-12 w-12 animate-spin text-primary" />
                <h2 className="text-xl font-semibold">Analyzing Your Palm</h2>
                <p className="text-muted-foreground">
                  Our AI is carefully analyzing your palm image. This may take a moment...
                </p>
              </div>
            </div>
          </div>
        </main>
        <Footer />
      </div>
    );
  }
  
  return (
    <div className="min-h-screen">
      <Header />
      
      <main className="pt-32 pb-24">
        <div className="content-container">
          <div className="max-w-4xl mx-auto text-center mb-12 reveal">
            <div className="inline-flex items-center px-4 py-2 rounded-full bg-primary/10 text-primary text-sm font-medium mb-6">
              <Hand className="h-4 w-4 mr-2" />
              Complete Palm Analysis
            </div>
            <h1 className="heading-lg mb-6">Your Premium Palm Reading Results</h1>
            <p className="text-muted-foreground text-lg max-w-2xl mx-auto">
              This analysis is based on our AI's interpretation of your palm image using traditional palmistry principles.
            </p>
          </div>
          
          <div className="max-w-4xl mx-auto glass-panel rounded-2xl p-10 mb-16 reveal">
            <div className="flex items-center justify-between mb-8 flex-wrap gap-4">
              <h2 className="heading-md">Complete Analysis</h2>
              <div className="flex gap-3 flex-wrap">
                <button 
                  onClick={handleFullReportDownload}
                  className="flex items-center gap-2 px-4 py-2 rounded-full bg-primary text-primary-foreground hover:bg-primary/90 transition-colors"
                  disabled={!palmAnalysis}
                >
                  <Download className="h-4 w-4" />
                  <span>Download Full Report</span>
                </button>
                <button 
                  onClick={handleBasicReportDownload}
                  className="flex items-center gap-2 px-4 py-2 rounded-full bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors"
                  disabled={!palmAnalysis}
                >
                  <Download className="h-4 w-4" />
                  <span>Download Basic Report</span>
                </button>
                <button className="flex items-center gap-2 px-4 py-2 rounded-full bg-secondary/10 text-secondary hover:bg-secondary/20 transition-colors">
                  <Share2 className="h-4 w-4" />
                  <span>Share</span>
                </button>
              </div>
            </div>
            
            <div className="prose prose-lg max-w-none text-left">
              {palmAnalysis ? (
                formatAnalysisContent(palmAnalysis)
              ) : error ? (
                <div className="p-6 border border-red-300 rounded-lg bg-red-50 text-center">
                  <div className="flex items-center justify-center mb-4">
                    <AlertCircle className="h-8 w-8 text-red-500 mr-2" />
                    <h3 className="text-xl font-medium text-red-700">Analysis Failed</h3>
                  </div>
                  <p className="text-red-600 font-medium mb-2">Error: {error}</p>
                  <p className="text-muted-foreground mb-4">
                    Unable to generate palm analysis. This could be due to one of the following reasons:
                  </p>
                  <ul className="text-left list-disc mb-6 mx-auto max-w-md">
                    <li className="mb-2">Your Gemini API key may be invalid or expired</li>
                    <li className="mb-2">The palm image might not be clear enough for analysis</li>
                    <li className="mb-2">There might be connection issues with the Gemini API</li>
                  </ul>
                  <div className="flex flex-col sm:flex-row gap-4 justify-center">
                    <button
                      onClick={retryAnalysis}
                      className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600"
                    >
                      Try Again
                    </button>
                    <button
                      onClick={() => navigate('/palm-reading')}
                      className="px-4 py-2 bg-primary text-white rounded-md hover:bg-primary/90"
                    >
                      Upload New Image
                    </button>
                  </div>
                </div>
              ) : (
                <div className="p-6 border border-yellow-300 rounded-lg bg-yellow-50 text-center">
                  <p className="text-center text-muted-foreground italic mb-4">
                    {hasAttemptedAnalysis 
                      ? "Analysis could not be generated. Please try uploading a clearer image of your palm." 
                      : "No palm analysis available. Please upload a palm image for analysis."}
                  </p>
                  <button
                    onClick={() => navigate('/palm-reading')}
                    className="px-4 py-2 bg-primary text-white rounded-md hover:bg-primary/90"
                  >
                    Upload Palm Image
                  </button>
                </div>
              )}
            </div>
          </div>
          
          <div className="text-center max-w-2xl mx-auto reveal">
            <Link to="/palm-reading" className="inline-block px-8 py-3 rounded-full bg-secondary text-secondary-foreground text-base font-medium hover:bg-secondary/90 transition-colors mb-6">
              Upload Another Palm Image
            </Link>
            <p className="text-muted-foreground">
              Want even more detailed insights? Check out our <Link to="/pricing" className="text-primary hover:underline">premium plans</Link>.
            </p>
          </div>
        </div>
      </main>
      
      <Footer />
    </div>
  );
};

export default PalmReadingResult;
